http://www.cmake.org/cmake/help/v2.8.10/cmake.html###gen:BorlandMakefiles

  cmake - Cross-Platform Makefile Generator.

Generated by cmake --help-html.


CMake may support multiple native build systems on certain platforms.
-G <generator-name>: Specify a makefile generator.
Generators section in cmake --help.


Project configuration settings may be specified on the command line with the -D option. The -i option will cause cmake to interactively prompt for such settings.

-i: Run in wizard mode.
Wizard mode runs cmake interactively without a GUI. The user is prompted to answer questions about the project configuration. The answers are used to set cmake cache values.


-L[A][H]: List non-advanced cached variables.
List cache variables will run CMake and list all the variables from the CMake cache that are not marked as INTERNAL or ADVANCED. This will effectively display current CMake settings, which can be then changed with -D option. Changing some of the variable may result in more variables being created. If A is specified, then it will display also advanced variables. If H is specified, it will also display help for each variable.


http://mirkokiefer.com/blog/2013/03/cmake-by-example/


CMake supports out-of-source builds - so all our compiled code goes into a directory separate to the sources.
cmake ..
This will generate build scripts using the default generator - on Linux/OSX this should be Makefiles.

cmake .. -DCMAKE_INSTALL_PREFIX=../_install


cmake .. -GXcode



(We do not recommend using GLOB to collect a list of source files from your source tree. If no CMakeLists.txt file changes when a source is added or removed then the generated build system cannot know when to ask CMake to regenerate.)


At the time of this writing (pre-GCC 4.8), it may not be a good idea to detect C++11 flags and add them. This is because changing the standard (at least for GCC) breaks ABI compatibility, which can result in link errors.
Therefore, the use of the C++11 standard should explicitly specified with the compiler setting during the initial CMake configuration of the project, e.g.
CXX='g++ -std=c++11' cmake /path/to/source
That is, the use of -std=c++11 should be treated like a separate compiler, which should not be mixed or changed in a project.






Support for many platforms, compilers, and targets built-in

Has auto-configuration abilities.

easy to install






it is not usable in single call
you must first run cmake and after that use generated makefile



develop should learn its own syntax, different from autotools



. makefile on linux, visual studio solution file on Windows


As for kde, they originally tried scons but were having a lot of trouble with it and switched to cmake.






syntax is not a barrier. 
1) users must install python (not an issue on ubuntu, but on other OSs it may be)
2) updates to python may break your scons scripts
3) updates to scons may break your scons scripts

Cmake has no dependencies (except c++, but since you are using this to build c++ not a problem).

cmake generates native buildsystem files, scons generates the native binaries.







In addition to a build system, over the years CMake has evolved into a family of development tools: CMake, CTest, CPack, and CDash




Depend only on a C++ compiler being installed on the system.
It must be able to generate Visual Studio IDE input files.
It must be easy to create the basic build system targets, including static libraries, shared libraries, executables, and plugins.
It must be able to run build time code generators.
It must support separate build trees from the source tree.
It must be able to perform system introspection, i.e., be able to determine automatically what the target system could and could not do.
It must do dependency scanning of C/C++ header files automatically.
All features would need to work consistently and equally well on all supported platforms.


All C/C++ programs require one or more of the following fundamental building blocks of software: executables, static libraries, shared libraries, and plugins. CMake had to provide the ability to create these products on all supported platforms. Although all platforms support the creation of those products, the compiler flags used to create them vary greatly from compiler to compiler and platform to platform. By hiding the complexity and platform differences behind a simple command in CMake, developers are able to create them on Windows, Unix and Mac. This ability allows developers to focus on the project rather than on the details of how to build a shared library.





































